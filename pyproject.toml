[tool.poetry]
name = "anycore-dbg-supplement"
version = "0.2.3"
description = "A bundle of auxiliary scripts for the Anycore project"
authors = ["Jiayang Li <jli95@ncsu.edu>"]
license = "Other/Proprietary License"
repository = "https://github.com/s117/anycore-dbg-supplement.git"
readme = "README.md"
keywords = ["anycore"]
classifiers = [
    "Operating System :: POSIX :: Linux",
    "Development Status :: 3 - Alpha",
]
packages = [
    { include = "Checkpointing" },
    { include = "CpuTraceAnalysis" },
    { include = "SimEnvControl" },
    { include = "SpecResultVerification" },
    { include = "SyscallAnalysis" },
    { include = "TetherSim" },
]
exclude = [
    "Checkpointing/SyscallAnalysis/archived",
    "debug_entry",
]

[tool.poetry.dependencies]
python = "^3.6"
click = "^7.1.2"
fuzzywuzzy = "^0.18.0"
pyparsing = "^2.4.7"
PyYAML = "^5.3.1"
python-Levenshtein = "^0.12.0"
coverage = "^5.3"
bashlex = "^0.15"

[tool.poetry.dev-dependencies]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# The simenv tool is comprised by serval subcommand:
#  spawn  - Spawn a new simenv using symlink, based on the information in the manifest DB
#  verify - Check the simenv based on the information in the manifest DB
#  learn  - Learn a new simenv from a syscall trace dump, save the learn result into manifest DB
#  list   - List all available apps and their checkpoints
#  mkgen  - Generate a Makefile for a given simulation
atool-simenv = "SimEnvControl.sim_env_cli:cli"

# Trim out the extra header/tail message produced by spike or pk during the simulation
atool_spike_trim = "SpecResultVerification.spike_trim:main"

# Convert the Simpoint output file to the checkpointing job description file accepted by Spike
atool_smpt2ckptdesc = "Checkpointing.ChkptDescFileGen.smpt2ckptdesc:main"

# Show the HTIF syscalls recorded in a checkpoint file
atool_chkpt_htif_dump = "Checkpointing.DumpHTIF.chkpt_htif_dump:main"

# The controller for 721sim's Tethering Sim mode
atool_SimTetheringController = "TetherSim.SimTetheringController:main"

# Analyze the trace dump and output the result in Google's Trace Event Format
atool_trace2google = "CpuTraceAnalysis.trace2google:main"

# Analyze the trace dump and show the result in the homebrew tracevis web frontend
atool_trace2tracevis = "CpuTraceAnalysis.trace2tracevis:main"

# Marking the first difference between two trace dump
atool_trace_diff = "CpuTraceAnalysis.trace_diff:main"